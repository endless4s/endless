akka {
  loglevel = "info"
  stdout-loglevel = "info"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"
  actor {
    provider = cluster
    allow-java-serialization = off
    serialize-messages = on
    serializers {
      scalapb-serializer = "endless.runtime.akka.protobuf.ScalaPbSerializer"
    }
    serialization-identifiers {
      "endless.runtime.akka.protobuf.ScalaPbSerializer" = 424242
    }
    serialization-bindings {
      "endless.example.proto.booking.events.BookingEvent" = scalapb-serializer
      "endless.example.proto.vehicle.state.VehicleStateV1" = scalapb-serializer
    }
  }
  remote {
    log-remote-lifecycle-events = on
    enabled-transports = ["akka.remote.netty.tcp"]
    artery {
      canonical {
        hostname = "127.0.0.1"
        port = 61000
      }
    }
  }

  cluster {
    seed-nodes = [
      "akka://example-akka-as@127.0.0.1:61000"
    ]
    sharding {
      # with a real DB, to guarantee at least once: remember-entities = on
      # with a real DB, to guarantee at least once: remember-entities-store = eventsourced
      passivate-idle-entity-after = off
    }
  }

  coordinated-shutdown.exit-jvm = off
}